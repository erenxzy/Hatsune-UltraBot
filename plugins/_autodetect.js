import chalk from 'chalk' import fetch from 'node-fetch' import ws from 'ws' let WAMessageStubType = (await import('@whiskeysockets/baileys')).default import { readdirSync, unlinkSync, existsSync, promises as fs, rmSync } from 'fs' import path from 'path'

let handler = m => m handler.before = async function (m, { conn, participants, groupMetadata }) { if (!m.messageStubType || !m.isGroup) return const fkontak = { "key": { "participants":"0@s.whatsapp.net", "remoteJid": "status@broadcast", "fromMe": false, "id": "Halo" }, "message": { "contactMessage": { "vcard": BEGIN:VCARD\nVERSION:3.0\nN:Sy;Bot;;;\nFN:y\nitem1.TEL;waid=${m.sender.split('@')[0]}:${m.sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD } }, "participant": "0@s.whatsapp.net" }

const bordes = [ "‚ï≠üå∏üíôüé§„Äå MIKU DETECT „Äçüé§üíôüå∏‚ïÆ", "‚ï∞üå∏üíôüåü Grupo Activo üåüüíôüå∏‚ïØ", "üíøüíö‚ú¶ Vocaloid Movimiento ‚ú¶üíöüíø", "üíøüíö‚ú¶ Acci√≥n detectada ‚ú¶üíöüíø", "üåüüéß‚åà Grupo Miku ‚åãüéßüåü", "üåüüéß‚åà Modo vigilante ‚åãüéßüåü", "üå∏üí†„Äé Miku Observa „Äèüí†üå∏", "üå∏üí†„Äé Registro completado „Äèüí†üå∏", "üéÄüíé‚åúüé§ Monitoreo üé§‚åüüíéüéÄ", "üéÄüíé‚åú Miku notific√≥ ‚åüüíéüéÄ" ];

const borde1 = bordes[Math.floor(Math.random() * bordes.length)] const borde2 = bordes[Math.floor(Math.random() * bordes.length)]

let chat = global.db.data.chats[m.chat] let usuario = @${m.sender.split@[0]} let pp = await conn.profilePictureUrl(m.chat, 'image').catch(_ => null) || 'https://files.catbox.moe/xr2m6u.jpg'

let nombre = ${borde1}\n‚ùÄ ${usuario} Ha cambiado el nombre del grupo.\n\n‚ú¶ Nuevo nombre:\n*${m.messageStubParameters[0]}*.\n${borde2} let foto = ${borde1}\n‚ùÄ Se ha cambiado la imagen del grupo.\n\n‚ú¶ Acci√≥n hecha por:\n¬ª ${usuario}\n${borde2} let edit = ${borde1}\n‚ùÄ ${usuario} Ha permitido que ${m.messageStubParameters[0] == 'on' ? 'solo admins' : 'todos'} configuren el grupo.\n${borde2} let newlink = ${borde1}\n‚ùÄ Enlace restablecido.\n\n‚ú¶ Hecho por:\n¬ª ${usuario}\n${borde2} let status = ${borde1}\n‚ùÄ El grupo fue ${m.messageStubParameters[0] == 'on' ? '*cerrado*' : '*abierto*'} por ${usuario}\n\n‚ú¶ Ahora ${m.messageStubParameters[0] == 'on' ? '*solo admins*' : '*todos*'} pueden escribir.\n${borde2} let admingp = ${borde1}\n‚ùÄ @${m.messageStubParameters[0].split@[0]} ahora es admin.\n‚ú¶ Hecho por: ${usuario}\n${borde2} let noadmingp = ${borde1}\n‚ùÄ @${m.messageStubParameters[0].split@[0]} dej√≥ de ser admin.\n‚ú¶ Hecho por: ${usuario}\n${borde2}

if (chat.detect && m.messageStubType == 2) { const uniqid = (m.isGroup ? m.chat : m.sender) const sessionPath = './Sessions/' for (const file of await fs.readdir(sessionPath)) { if (file.includes(uniqid)) { await fs.unlink(path.join(sessionPath, file)) console.log(${chalk.yellow.bold('[ Archivo Eliminado ]')} ${chalk.greenBright('${file}')}\n + ${chalk.blue('(Session PreKey)')} ${chalk.redBright('Eliminado para prevenir errores')}) } } } else if (chat.detect && m.messageStubType == 21) { await this.sendMessage(m.chat, { text: nombre, mentions: [m.sender] }, { quoted: fkontak }) } else if (chat.detect && m.messageStubType == 22) { await this.sendMessage(m.chat, { image: { url: pp }, caption: foto, mentions: [m.sender] }, { quoted: fkontak }) } else if (chat.detect && m.messageStubType == 23) { await this.sendMessage(m.chat, { text: newlink, mentions: [m.sender] }, { quoted: fkontak }) } else if (chat.detect && m.messageStubType == 25) { await this.sendMessage(m.chat, { text: edit, mentions: [m.sender] }, { quoted: fkontak }) } else if (chat.detect && m.messageStubType == 26) { await this.sendMessage(m.chat, { text: status, mentions: [m.sender] }, { quoted: fkontak }) } else if (chat.detect && m.messageStubType == 29) { await this.sendMessage(m.chat, { text: admingp, mentions: [${m.sender},${m.messageStubParameters[0]}] }, { quoted: fkontak }) } else if (chat.detect && m.messageStubType == 30) { await this.sendMessage(m.chat, { text: noadmingp, mentions: [${m.sender},${m.messageStubParameters[0]}] }, { quoted: fkontak }) } else { if (m.messageStubType == 2) return console.log({ messageStubType: m.messageStubType, messageStubParameters: m.messageStubParameters, type: WAMessageStubType[m.messageStubType], }) } } export default handler

